#include<bits/stdc++.h>
#include<string.h>
#define ll long long int
#define br <<"\n";
#define vecint vector<int>
#define vecstring vector<string>
#define For(i,n) for(int i=0;i<n;i++)
#define Forran(i,n,a) for(int i=n;i<a;i++)
#define Forrev(i,n) for(int i = n-1; i >= 0; i--)
#define fastio ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
bool isprime(const ll n)
{
    if (n <= 1)
        return false;
    if (n <= 3)
        return true;
    if (n % 2 == 0 or n % 3 == 0)
        return false;
    for (ll i = 5; i * i <= n; i += 6)
        if (n % i == 0 or n % (i + 2) == 0)
            return false;
    return true;
}
int gcd(int a,int b)
{
    while(a!=0)
    {
        if(a<b)
            swap(a,b);
        a=a%b;
    }
    return b;
}
bool descending(int x, int y){
   return x > y;   // vector sorting use sort(v.begin(),v.end(),descending);
}
int main()
{
    fastio
    int n,l,x,i,j;
    cin>>n>>l;
    string sa;
    vecstring ra;
    For(i,n)
    {
        cin>>sa;
        ra.push_back(sa);
    }
    For(i,n)
    {
        For(j,l)
        {
            x=0;
            if(j<l-1 && ra[i][j+1]=='*' )
            {
                x++;
            }
            if(i<n-1 && ra[i+1][j]=='*' )
            {
                x++;
            }
            if(i<n-1 && j<l-1 && ra[i+1][j+1]=='*')
            {
                x++;
            }
            if(i && j && ra[i-1][j-1]=='*')
            {
                x++;
            }
            if(j && ra[i][j-1]=='*')
            {
                x++;
            }
            if(i && ra[i-1][j]=='*' )
            {
                x++;
            }
            if(i && j<l-1 && ra[i-1][j+1]=='*')
            {
                x++;
            }
            if(j && i<n-1 && ra[i+1][j-1]=='*')
            {
                x++;
            }
            if(ra[i][j]=='*')
                cout<<"*";
            else if(x==0)
                cout<<".";
            else
                cout<<x;
        }
        cout br;
    }
    return 0;
}
